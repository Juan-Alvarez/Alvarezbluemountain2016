<?php
/**
 * @package    WP Basis
 * @subpackage 
 * @since 0.0.1
 */

//add_action( 'after_setup_theme', array( 'Wp_Basis', 'get_object' ) );
class Wp_Basis {
	
	/**
	 * The class object
	 *
	 * @static
	 * @since  0.0.1
	 * @var    NULL
	 */
	static protected $class_object = NULL;
	
	protected $theme_options   = array();
	protected $post_thumbnails = array();
	protected $post_formats    = array();
	
	/**
	 * to load the object and get the current state 
	 *
	 * @access  public
	 * @since   0.0.1
	 * @return  $class_object  Object
	 */
	public function get_object() {
		
		if ( NULL == self::$class_object )
			self::$class_object = new self;
		
		return self::$class_object;
	}
	
	public function __construct() {
		
		$this->post_thumbnails = array( 'post', 'page' );
		$this->post_formats    = array( 
			'aside', 'audio', 'chat', 'code', 'gallery', 'image',
			'link', 'quote', 'status', 'video'
		);
		
		! isset ( $GLOBALS['content_width'] ) && $GLOBALS['content_width'] = 480;
		
		add_theme_support( 'post-thumbnails', $this->post_thumbnails );
		add_theme_support( 'automatic-feed-links' );
		add_theme_support(
			'post-formats',
			$this->post_formats
		);
		
		add_theme_support( 'menus' );
		
		add_theme_support( 'show_sidebar-1' );
		
		add_editor_style();
		
		add_custom_background();
		
		// Images
		add_image_size( 'default', 480, 270, TRUE );
		set_post_thumbnail_size( 150, 150 );
		
		// WP Basis Core
		add_theme_support( 'wpbasis-core' );
		if ( current_theme_supports( 'wpbasis-core' ) ) {
			locate_template( array( 'core/class-core.php' ), TRUE, TRUE );
			Wp_Basis_Core :: init( $args = array( 'wp_update_themes' => FALSE ) );
		}
		
		// helper
		// @ToDo inside a controller, this is only a test
		add_theme_support( 'wpbasis-helper' );
		if ( current_theme_supports( 'wpbasis-helper' ) ) {
			locate_template( array( 'classes/helpers/class-helper.php' ), TRUE, TRUE );
			Wp_Basis_Helper :: get_object(); // print values on contextual help
		}
		/** old test
		locate_template( array( 'classes/class-core.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-scripts.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-styles.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-hooks.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-templates.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-theme_options.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-comments.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-login_style.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-default_sidebars.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-widgets.php' ), TRUE, TRUE );
		locate_template( array( 'classes/class-exif.php' ), TRUE, TRUE );
		
		Wp_Basis_Core :: init( $args = array( 'wp_update_themes' => FALSE ) );
		Wp_Basis_Hooks :: init();
		Wp_Basis_Comments :: init();
		Wp_Basis_Login_Style :: init();
		Wp_Basis_Default_Sidebars :: init();
		Wp_Basis_Widgets :: init( $args = array() ); // use array for widget classes
		
		//add_action( 'init', 	array ( __CLASS__, 'init_core' ) );
		add_action( 'init', 	array( __CLASS__, 'init_theme_scripts' ) );
		add_action( 'init', 	array( __CLASS__, 'init_theme_styles' ) );
		add_action( 'init', 	array( __CLASS__, 'init_theme_option_pages' ) );
		
		add_action( 'wp_head', 	array( __CLASS__, 'add_head_scripts' ) );
		add_action( 'wp_head', 	array( __CLASS__, 'insert_frontend_style' ) );
		
		add_action( 'admin_print_scripts-appearance_page_colors', 	array( __CLASS__, 'init_admin_color_scripts' ) );
		add_action( 'admin_print_styles-appearance_page_colors', 	array( __CLASS__, 'init_admin_color_styles' ) );
		
		add_action( 'init', array( __CLASS__, 'get_theme_settings' ) );
		
		// hooks on templates of WP Basis
		add_action( 'wp_basis_after_content', array( 'Wp_Basis_Templates', 'content_nav' ) );
		
		*/ // end test
	}
	
	public function init_core( $args ) {
		
		$args = new Wp_Basis_Core(
			array( 'wp_update_themes' => FALSE )
		);
	}
	
	public function get_text_domain() {
		
		return Wp_Basis_Core :: get_text_domain();
	}
	
	public function add_head_scripts() {
		
		Wp_Basis_Scripts :: print_scripts( $args = array( 'script' => 'html5' ) );
	}
	
	public function init_theme_scripts( $scripts ) {
		
		$default = new Wp_Basis_Scripts(
			array( 
				'on_admin' => FALSE,
				'scripts' => array( 'respond' )
			)
		);
	}
	
	public function init_admin_color_scripts( $scripts ) {
		
		wp_enqueue_script( 
			'wp_photography-options',
			Wp_Basis_Templates :: get_js_dir() . 'admin-theme-options.js',
			array( 'farbtastic' ),
			'2011-06-16'
		);
	}
	
	public function init_theme_styles( $styles ) {
		
		$default = new Wp_Basis_Styles(
			array(
				'styles' => array( 'normalize', 'wp_basis_core' ) )
		);
	}
	
	public function init_admin_color_styles( $args ) {
		
		$default = new Wp_Basis_Styles(
			array(
				'on_admin' => TRUE,
				'styles' => array( 'farbtastic' )
			)
		);
		
		wp_enqueue_style( 
			'wp_photography-options',
			Wp_Basis_Templates :: get_css_dir() . 'admin-theme-options.css',
			FALSE,
			'2011-06-15'
		);
	}
	
	public function init_theme_option_pages( $pages ) {
		
		self :: register_color_options();
		self :: register_misc_options();
		self :: register_text_options();
	}
	
	public function register_color_options() {
		
		$color_fields = array (
			'text_color' => array (
				'type'         => 'color',
				'label'        => __( 'Color for text', self :: get_text_domain() ),
				'defaultvalue' => '#000000'
			)
		);
		
		$color = new Wp_Basis_Theme_Options (
			array (
				'page_title'  => __( 'Text- and Backgroundcolors', self :: get_text_domain() ),
				'menu_title'  => __( 'Colors', self :: get_text_domain() ),
				'slug'        => 'colors',
				'fields'      => $color_fields,
				'description' => __( '<p>Please set  ...</p>', self :: get_text_domain() )
			)
		);
	}
	
	public function register_misc_options() {
		
		$fields = array (
			'show_sidebar-1' => array (
				'type'         => 'checkbox',
				'label'        => __( 'Show Sidebar Main', self :: get_text_domain() ),
				'defaultvalue' => 'on'
			)
		);
		
		$misc = new Wp_Basis_Theme_Options (
			array (
				'page_title'  => __( 'Settings Theme', self :: get_text_domain() ),
				'menu_title'  => __( 'Settings', self :: get_text_domain() ),
				'slug'        => 'misc-settings',
				'fields'      => $fields,
				'description' => __( '<p>Please set options for ...</p>', self :: get_text_domain() )
			)
		);
	}
	
	public function register_text_options() {
		
		$text_fields = array (
			'footer_text'  => array (
				__( 'String in Footer', self :: get_text_domain() ),
				__( 'a sample string for footer', self :: get_text_domain() )
			)
		);
		
		$fields = array();
		foreach ( $text_fields as $key => $value ) {
			$label    = $value[0];
			$default  = $value[1];
			$desc     = isset ( $value[2] ) ? $value[2] : '';
			$type     = isset ( $value[3] ) ? $value[3] : 'text';
			$fields['text_' . $key] = array (
				'type'         => $type,
				'label'        => $label,
				'key'          => 'text_' . $key,
				'defaultvalue' => $default,
				'description'  => $desc,
				'input_attrs'  => array( 'size' => 40 )
			);
		}
		
		$texts = new Wp_Basis_Theme_Options (
			array (
				'page_title'  => __( 'Strings', self :: get_text_domain() ),
				'slug'        => __( 'Strings', self :: get_text_domain() ),
				'fields'      => $fields,
				'description' => '<p>' . __( 'Please insert...', self :: get_text_domain() ) . '</p>',
			)
		);
	}
	
	public function insert_frontend_style() {
		
		$out = FALSE;
		$text_color = get_theme_mod( 'text_color' );
		
		if ( $text_color )
			$out = "body { color: $text_color }";
		
		if ( $out )
			echo "<style>@media screen, projection {\n\t $out \n}</style>";
	}
	
	public function get_theme_settings() {
		
		if ( 'on' != get_theme_mod( 'show_sidebar-1' ) )
			unregister_sidebar( 'sidebar-1' );
	}
	
} // end class
